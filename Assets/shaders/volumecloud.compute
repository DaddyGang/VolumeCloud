#pragma kernel CSMain

Texture2D<float4> Source;
RWTexture2D<float4> Destination;

Texture3D<float4> NoiseTex;
Texture3D<float4> DetailNoiseTex;
Texture2D<float4> BlueNoise;
Texture2D<float4> WhetherMap;

SamplerState samplerNoiseTex;
SamplerState samplerDetailNoiseTex;
SamplerState samplerBlueNoise;
SamplerState samplerWhetherMap;

float4x4 _CameraToWorld;
float4x4 _CameraInverseProjection;

float3 _Light;
float4 _LightColor;
bool positionLight;

float scale;
float densityMultiplier;
float densityOffset;
float lightAbsorptionTowardSun;
float lightAbsorptionFromCloud;
float darknessThreshold;
float3 params;
float rayOffsetStrength;
float detailNoiseScale;
float detailNoiseWeight;
float3 shapeOffset;
float3 detailOffset;
float3 detailWeights;
float3 detailNoiseWeights;
float4 shapeNoiseWeights;
float4 phaseParams;
int numStepsLight;
float timeScale;
float baseSpeed;
float detailSpeed;

float4 skyBaseColor;
float4 skyTintColor;

static const float maxDst = 3000;
static const float epsilon = 0.1f;
static const float shadowBias = epsilon * 50;

struct CloudBox
{
    float3 position;
    float3 size;
};

StructuredBuffer<CloudBox> cbox;

CloudBox box;

struct Ray
{
    float3 origin;
    float3 direction;
};

float SphereDistance(float3 eye, float3 centre, float radius)
{
    return distance(eye, centre) - radius;
}

float CubeDistance(float3 eye, float3 cen, float3 size)
{
    float3 o = abs(eye - cen) - size;
    float ud = length(max(o, 0));
    float n = max(max(min(o.x, 0), min(o.y, 0)), min(o.z, 0));
    return ud + n;
}

Ray CreateRay(float3 origin, float3 direction)
{
    Ray ray;
    ray.origin = origin;
    ray.direction = direction;
    return ray;
}

Ray CreateCameraRay(float2 uv)
{
    float3 origin = mul(_CameraToWorld, float4(0, 0, 0, 1)).xyz;
    float3 direction = mul(_CameraInverseProjection, float4(uv, 0, 1)).xyz;
    direction = mul(_CameraToWorld, float4(direction, 0)).xyz;
    direction = normalize(direction);
    return CreateRay(origin, direction);
}


// Returns (dstToBox, dstInsideBox). If ray misses box, dstInsideBox will be zero
float2 rayBoxDst(float3 boxpos, float3 boxsize, float3 rayOrigin, float3 invRaydir)
{
    float3 boundsMin = boxpos - boxsize / 2.0f;
    float3 boundsMax = boxpos + boxsize / 2.0f;
    // Adapted from: http://jcgt.org/published/0007/03/04/
    float3 t0 = (boundsMin - rayOrigin) * invRaydir;
    float3 t1 = (boundsMax - rayOrigin) * invRaydir;
    float3 tmin = min(t0, t1);
    float3 tmax = max(t0, t1);
                
    float dstA = max(max(tmin.x, tmin.y), tmin.z);
    float dstB = min(tmax.x, min(tmax.y, tmax.z));

    // CASE 1: ray intersects box from outside (0 <= dstA <= dstB)
    // dstA is dst to nearest intersection, dstB dst to far intersection

    // CASE 2: ray intersects box from inside (dstA < 0 < dstB)
    // dstA is the dst to intersection behind the ray, dstB is dst to forward intersection

    // CASE 3: ray misses box (dstA > dstB)

    float dstToBox = max(0, dstA);
    float dstInsideBox = max(0, dstB - dstToBox);
    return float2(dstToBox, dstInsideBox);
}

float remap(float v, float minOld, float maxOld, float minNew, float maxNew)
{
    return minNew + (v - minOld) * (maxNew - minNew) / (maxOld - minOld);
}

float SampleDensity(float3 position)
{
    // Sample Texture in Noise Map
    const int mipmapLevel = 0;
    const float baseScale = 1 / 1000.0f;
    const float offsetSpeed = 1 / 100.0f;
    
    // Calculate texture sample points
    float time = 0.0f * timeScale;
    float3 center = box.position;
    float3 uvw = (box.size * 0.5f + position) * baseScale * scale;
    float3 shapeSamplePos = uvw + shapeOffset * offsetSpeed;
    
    // Calculate fade off along edges of xz plane
    const float containerEdgeFadeDst = 50.0f;
    float3 boundsMin = center - box.size / 2.0f;
    float3 boundsMax = center + box.size / 2.0f;
    float dstFromEdgeX = min(containerEdgeFadeDst, min(position.x - boundsMin.x, boundsMax.x - position.x));
    float dstFromEdgeZ = min(containerEdgeFadeDst, min(position.z - boundsMin.z, boundsMax.z - position.z));
    float edgeWeight = min(dstFromEdgeZ, dstFromEdgeX) / containerEdgeFadeDst;
    
    // Calculate height gradient from weather map
    float2 weatherUV = (box.size.xz * 0.5f + (position.xz - center.xz)) / max(box.size.x, box.size.z);
    float wNoise = WhetherMap.SampleLevel(samplerWhetherMap, weatherUV, mipmapLevel).x;
    float gMin = remap(wNoise.x, 0, 1, 0.1, 0.5);
    float gMax = remap(wNoise.x, 0, 1, gMin, 0.9);
    float heightPercent = (position.y - boundsMin.y) / box.size.y;
    float heightGradient = saturate(remap(heightPercent, 0.0, gMin, 0, 1)) * saturate(remap(heightPercent, 1, gMax, 0, 1));
    heightGradient *= edgeWeight;
    
    // Calculate base shape density
    float4 shapeNoise = NoiseTex.SampleLevel(samplerNoiseTex, shapeSamplePos, mipmapLevel);
    float4 normalizedShapeWeights = shapeNoiseWeights / dot(shapeNoiseWeights, 1);
    float shapeFBM = dot(shapeNoise, normalizedShapeWeights) * heightGradient;
    float baseShapeDensity = shapeFBM + densityOffset * .1;

    if (baseShapeDensity > 0)
    {
        float3 detailSamplePos = uvw * detailNoiseScale + detailOffset * offsetSpeed;
        float4 detailNoise = DetailNoiseTex.SampleLevel(samplerDetailNoiseTex, detailSamplePos, mipmapLevel);
        float3 normalizedDetailWeights = detailWeights / dot(detailWeights, 1);
        float detailFBM = dot(detailNoise.xyz, normalizedDetailWeights);
        float oneMinusShape = 1 - shapeFBM;
        float detailErodeWeight = oneMinusShape * oneMinusShape * oneMinusShape;
        float cloudDensity = baseShapeDensity - (1 - detailFBM) * detailErodeWeight * detailNoiseWeight;
    
        return cloudDensity * densityMultiplier * 0.1;
    }
    return 0.0f;
}

float LightMarch(float3 position)
{
    // March from point on ray
    float3 dirToLight = _Light;

    float dstInsideBox = rayBoxDst(box.position, box.size, position, 1 / dirToLight).y;
                
    float stepSize = dstInsideBox / numStepsLight;
    float totalDensity = 0;

    for (int step = 0; step < numStepsLight; step++)
    {
        position += dirToLight * stepSize;
        totalDensity += max(0, SampleDensity(position) * stepSize);
    }

    float transmittance = exp(totalDensity * lightAbsorptionTowardSun);
    return darknessThreshold + transmittance * (1 - darknessThreshold);
}

// Henyey-Greenstein
float hg(float a, float g)
{
    float g2 = g * g;
    return (1 - g2) / (4 * 3.1415 * pow(1 + g2 - 2 * g * (a), 1.5));
}

float phase(float a)
{
    float blend = .5;
    float hgBlend = hg(a, phaseParams.x) * (1 - blend) + hg(a, -phaseParams.y) * blend;
    return phaseParams.z + hgBlend * phaseParams.w;
}

float beer(float d)
{
    float beer = exp(-d);
    return beer;
}

[numthreads(8, 8, 1)]
void CSMain(uint3 id : SV_DispatchThreadID)
{
    uint width, height;
    Destination.GetDimensions(width, height);

    Destination[id.xy] = Source[id.xy];

    float2 uv = float2((id.xy + float2(0.5f, 0.5f)) / float2(width, height) * 2.0f - 1.0f);
    float rayDst = 0;

    Ray ray = CreateCameraRay(uv);
    int marchSteps = 0;
    
    box = cbox[0];
    

    float2 rayToBoxInfo = rayBoxDst(box.position, box.size, ray.origin, 1.0f / ray.direction);
    float dstToBox = rayToBoxInfo.x;
    float dstInsideBox = rayToBoxInfo.y;
    // Point of entry from ray into the cloud container
    float3 entryPoint = ray.origin + ray.direction * dstToBox;
    
    // random offset
    float randomOffset = BlueNoise.SampleLevel(samplerBlueNoise, id.xy, 0);
    randomOffset *= rayOffsetStrength;
    
    // Phase function makes clouds brighter around sun
    float cosAngle = dot(ray.direction, _Light);
    float phaseVal = phase(cosAngle);
    
    float dstLimit = min(maxDst - dstToBox, dstInsideBox);
    
    // March through the volume
    float dstTravelled = randomOffset;
    float transmittance = 1.0f;
    float lightEnergy = 0.0f;
    const float STEPSIZE = 12.0f;
    
    float3 rayPos;
    while (dstTravelled < dstLimit)
    {
        rayPos = entryPoint + ray.direction * dstTravelled;
        float density = SampleDensity(rayPos);
        if (density > 0)
        {
            float lightTransmittance = LightMarch(rayPos);
            lightEnergy += density * STEPSIZE * transmittance * lightTransmittance * phaseVal;
            transmittance *= exp(-density * STEPSIZE * lightAbsorptionFromCloud);
            if (transmittance < 0.01f)
            {
                break;
            }
        }
        dstTravelled += STEPSIZE;
    }
    
    // sky + background
    float3 skyColor = lerp(skyBaseColor.rgb, skyTintColor.rgb, sqrt(abs(saturate(ray.direction.y))));
    float3 bgColor = Source[id.xy];
    float depth = 0.0f;
    float3 dstFog = 1 - exp(-max(0, depth)*8*0.0001);
    float3 sky = dstFog * skyColor;
    bgColor = bgColor * (1 - dstFog) + sky;
    
    // Sun
    float focusedEyeCos = pow(saturate(cosAngle), params.x);
    float sun = saturate(hg(focusedEyeCos, 0.995f)) * transmittance;
    
    // Render Clouds
    float3 cloudColor = lightEnergy * _LightColor.rgb;
    float3 color = bgColor * transmittance + cloudColor;
    color = saturate(color) * (1.0f - sun) + _LightColor.rgb * sun;
    Destination[id.xy] = float4(color, 1.0f);
}
